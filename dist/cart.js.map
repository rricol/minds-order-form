{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/utils/cookieManager.ts", "../src/utils/getFunctions.ts", "../src/utils/updateFunctions.ts", "../src/utils/handlersFunctions.ts", "../src/cart.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { addResourceToSelectedList } from './productManager';\nimport type { Product } from './type';\n\nexport function setCookie(name: string, value: any, days: number): void {\n  const date = new Date();\n  date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);\n  document.cookie = `${name}=${JSON.stringify(value)};expires=${date.toUTCString()};path=/`;\n}\n\nexport function getCookie(name: string): any {\n  const nameEQ = `${name}=`;\n  const ca = document.cookie.split(';');\n  for (let i = 0; i < ca.length; i++) {\n    const c = ca[i].trim();\n    if (c.indexOf(nameEQ) === 0) return JSON.parse(c.substring(nameEQ.length));\n  }\n  return null;\n}\n\nexport function removeResourceFromCookie(productType: string, productTitle: string): void {\n  let products: Product[] = getCookie('selectedProducts') || [];\n  products = products.filter(\n    (product) => !(product.type === productType && product.title === productTitle)\n  );\n  setCookie('selectedProducts', products, 7);\n}\n\nexport function removeAllResourcesFromCookie(): void {\n  setCookie('selectedProducts', [], 7);\n}\n\nexport function loadResourcesFromCookie(): void {\n  const products: Product[] = getCookie('selectedProducts') || [];\n  products.forEach((product) =>\n    addResourceToSelectedList(\n      product.type,\n      product.title,\n      product.quantity,\n      product.quantityA3,\n      product.quantityA2\n    )\n  );\n}\n\nexport function updateCookie(): void {\n  const selectedProductsWrapper = document.querySelector(\n    '[data-nmra-element=\"list\"]'\n  ) as HTMLElement;\n  const selectedProductElements = selectedProductsWrapper.querySelectorAll('.selected-product');\n  const products: Product[] = Array.from(selectedProductElements).map((productElement) => {\n    const productType = productElement.querySelector('.nmra-resource_type')?.textContent as string;\n    const productTitle = productElement.querySelector('.nmra-resource_name')?.textContent as string;\n    const quantity =\n      productType === 'Infographie'\n        ? 0\n        : parseInt((productElement.querySelector('.quantity-input') as HTMLInputElement).value);\n    const quantityA3 =\n      productType === 'Infographie'\n        ? parseInt(\n            (productElement.querySelector('[data-nmra-format=\"A3\"]') as HTMLInputElement).value\n          )\n        : 0;\n    const quantityA2 =\n      productType === 'Infographie'\n        ? parseInt(\n            (productElement.querySelector('[data-nmra-format=\"A2\"]') as HTMLInputElement).value\n          )\n        : 0;\n    return { type: productType, title: productTitle, quantity, quantityA3, quantityA2 };\n  });\n  setCookie('selectedProducts', products, 7);\n}\n", "import { getCookie } from './cookieManager';\nimport type { Product } from './type';\n\nexport function getPricing(): string {\n  const products: Product[] = getCookie('selectedProducts') || [];\n  let total = 0;\n\n  products.forEach((product) => {\n    const { type, quantity, quantityA3 = 0, quantityA2 = 0 } = product;\n    if (type === 'Infographie') {\n      total += quantityA2 * 6 + quantityA3 * (quantityA3 < 10 ? 4 : 3);\n    } else if (type === 'Brochure') {\n      total += quantity * (quantity < 10 ? 9 : quantity < 30 ? 8 : 7);\n    } else if (type === 'Publication') {\n      total += quantity * (quantity < 5 ? 16 : quantity < 10 ? 14 : 13);\n    }\n  });\n\n  return total.toString();\n}\n\nexport function getResourcePricing(product: Product): number {\n  const { type, quantity, quantityA3 = 0, quantityA2 = 0 } = product;\n  if (type === 'Infographie') {\n    return quantityA2 * 6 + quantityA3 * (quantityA3 < 10 ? 4 : 3);\n  }\n  if (type === 'Brochure') {\n    return quantity * (quantity < 10 ? 9 : quantity < 30 ? 8 : 7);\n  }\n  if (type === 'Publication') {\n    return quantity * (quantity < 5 ? 16 : quantity < 10 ? 14 : 13);\n  }\n\n  return 0;\n}\n\nexport function getResourceCount(): number {\n  const products: Product[] = getCookie('selectedProducts') || [];\n  return products.length;\n}\n", "import { getCookie, setCookie } from './cookieManager';\nimport { getResourceCount } from './getFunctions';\nimport { checkQuantities } from './stepsManager';\nimport type { Product } from './type';\n\nexport function updatePricing(): void {\n  const products: Product[] = getCookie('selectedProducts') || [];\n  let total = 0;\n\n  products.forEach((product) => {\n    const { type, quantity, quantityA3 = 0, quantityA2 = 0 } = product;\n    if (type === 'Infographie') {\n      total += quantityA2 * 6 + quantityA3 * (quantityA3 < 10 ? 4 : 3);\n    } else if (type === 'Brochure') {\n      total += quantity * (quantity < 10 ? 9 : quantity < 30 ? 8 : 7);\n    } else if (type === 'Publication') {\n      total += quantity * (quantity < 5 ? 16 : quantity < 10 ? 14 : 13);\n    }\n  });\n\n  const countTotalElement = document.querySelector('[data-nmra-element=\"total\"]') as HTMLElement;\n  countTotalElement.textContent = total.toString();\n}\n\nexport function updateResourceCount(): void {\n  const selectedProductCount = document.querySelector('[data-nmra-element=\"count\"]') as HTMLElement;\n  const cartCount = document.querySelector('[data-nmra-element=\"cart-count\"]') as HTMLElement;\n\n  const productCount = getResourceCount();\n\n  selectedProductCount.innerHTML =\n    productCount === 0\n      ? '<span>Aucune ressource s\u00E9lectionn\u00E9e</span>'\n      : `<span class=\"product-count\">${productCount}</span> ressource${productCount > 1 ? 's' : ''} s\u00E9lectionn\u00E9e${productCount > 1 ? 's' : ''}`;\n  cartCount.textContent = productCount.toString();\n}\n\nexport function updateResourceQuantityInCookie(\n  productType: string,\n  productTitle: string,\n  quantities: { [key: string]: number }\n): void {\n  const products: Product[] = getCookie('selectedProducts') || [];\n  const productIndex = products.findIndex(\n    (product) => product.type === productType && product.title === productTitle\n  );\n\n  if (productIndex !== -1) {\n    if (quantities.quantity !== undefined) {\n      products[productIndex].quantity = quantities.quantity;\n    }\n    if (quantities.A3 !== undefined) {\n      products[productIndex].quantityA3 = quantities.A3;\n    }\n    if (quantities.A2 !== undefined) {\n      products[productIndex].quantityA2 = quantities.A2;\n    }\n    setCookie('selectedProducts', products, 7);\n  }\n  updatePricing();\n}\n\nexport function updateNextStepButtons(): void {\n  const nextStepButtons = document.querySelectorAll(\n    '[data-nmra-action=\"next-step\"]'\n  ) as NodeListOf<HTMLButtonElement>;\n  const disabled = getResourceCount() === 0 || !checkQuantities();\n\n  nextStepButtons?.forEach((element) => {\n    if (disabled) {\n      element.classList.add('is-disabled');\n      element.setAttribute('disabled', disabled.toString());\n    } else {\n      element.classList.remove('is-disabled');\n      element.removeAttribute('disabled');\n    }\n  });\n}\n\nexport function updateData(): void {\n  updatePricing();\n  updateResourceCount();\n  updateNextStepButtons();\n}\n\nexport function updateCart(Product: Product): void {\n  const products: Product[] = getCookie('selectedProducts') || [];\n  products.push(Product);\n  setCookie('selectedProducts', products, 7);\n}\n\nexport function updateCartMenu(): void {\n  const carts = document.querySelectorAll('[data-nmra-element=\"cart\"]');\n  carts.forEach((element) => {\n    const count = element.querySelector('[data-nmra-element=\"cart-count\"]');\n    if (count) count.textContent = getResourceCount().toString();\n  });\n}\n", "import { getCookie, removeAllResourcesFromCookie, removeResourceFromCookie } from './cookieManager';\nimport { getPricing, getResourceCount, getResourcePricing } from './getFunctions';\nimport { addResourceToSelectedList } from './productManager';\nimport { checkQuantities } from './stepsManager';\nimport type { Product } from './type';\nimport { updateCart, updateData, updateResourceQuantityInCookie } from './updateFunctions';\n\nfunction resourceAlreadySelected(productType: string, productTitle: string): boolean {\n  const products = getCookie('selectedProducts') || [];\n  return products.some(\n    (product: { type: string; title: string }) =>\n      product.type === productType && product.title === productTitle\n  );\n}\n\nexport function handleRemove(event: Event): void {\n  const productElement = (event.target as HTMLElement).closest('.selected-product') as HTMLElement;\n  const productType = productElement.querySelector('.nmra-resource_type')?.textContent;\n  const productTitle = productElement.querySelector('.nmra-resource_name')?.textContent;\n\n  if (productType && productTitle) {\n    productElement.remove();\n    removeResourceFromCookie(productType, productTitle);\n    updateData();\n  }\n}\n\nexport function handleInscrease(event: Event): void {\n  const input = (event.target as HTMLElement)\n    .closest('.nmra-resource_quantity-group')\n    ?.querySelector('input') as HTMLInputElement;\n  const format = input.getAttribute('data-nmra-format');\n  const resourceType = input\n    .closest('[data-nmra-element=\"card\"]')\n    ?.querySelector('.nmra-resource_type')?.textContent;\n  const resourceName = input\n    .closest('[data-nmra-element=\"card\"]')\n    ?.querySelector('.nmra-resource_name');\n\n  const currentQuantity = isNaN(parseInt(input.value)) ? 0 : parseInt(input.value);\n  input.value = (currentQuantity + 1).toString();\n\n  if (resourceType && resourceName) {\n    updateResourceQuantityInCookie(\n      resourceType,\n      resourceName.textContent as string,\n      format ? { [format]: parseInt(input.value) } : { quantity: parseInt(input.value) }\n    );\n    updateData(); // Update pricing after changing quantity\n  }\n}\n\nexport function handleDecrease(event: Event): void {\n  const input = (event.target as HTMLElement)\n    .closest('.nmra-resource_quantity-group')\n    ?.querySelector('input') as HTMLInputElement;\n  const format = input.getAttribute('data-nmra-format');\n  const resourceType = input\n    .closest('[data-nmra-element=\"card\"]')\n    ?.querySelector('.nmra-resource_type')?.textContent;\n  const resourceName = input\n    .closest('[data-nmra-element=\"card\"]')\n    ?.querySelector('.nmra-resource_name');\n\n  const currentQuantity = isNaN(parseInt(input.value)) ? 0 : parseInt(input.value);\n  if (currentQuantity > 0) {\n    input.value = (currentQuantity - 1).toString();\n  }\n\n  if (resourceType && resourceName) {\n    updateResourceQuantityInCookie(\n      resourceType,\n      resourceName.textContent as string,\n      format ? { [format]: parseInt(input.value) } : { quantity: parseInt(input.value) }\n    );\n    updateData(); // Update pricing after changing quantity\n  }\n}\n\nexport function handleInputChange(event: Event): void {\n  const input = event.target as HTMLInputElement;\n  const newQuantity = isNaN(parseInt(input.value)) ? 0 : parseInt(input.value);\n  const format = input.getAttribute('data-nmra-format');\n  const resourceType = input\n    .closest('[data-nmra-element=\"card\"]')\n    ?.querySelector('.nmra-resource_type')?.textContent;\n  const resourceName = input\n    .closest('[data-nmra-element=\"card\"]')\n    ?.querySelector('.nmra-resource_name');\n\n  if (resourceType && resourceName) {\n    if (newQuantity >= 0) {\n      updateResourceQuantityInCookie(\n        resourceType,\n        resourceName.textContent as string,\n        format ? { [format]: newQuantity } : { quantity: newQuantity }\n      ); // Update pricing after changing quantity\n    } else {\n      input.value = '0';\n    }\n  }\n  updateData();\n}\n\nexport function handleAddResource(event: Event): void {\n  const productElement = (event.target as HTMLElement).closest(\n    '[data-nmra-element=\"resource\"]'\n  ) as HTMLElement;\n  const titleElement = productElement.querySelector('[data-nmra-element=\"title\"]') as HTMLElement;\n  const resourceTitle = titleElement?.innerText as string;\n  const resourceType = titleElement.getAttribute('data-nmra-type') as string;\n  if (!resourceAlreadySelected(resourceType, resourceTitle)) {\n    addResourceToSelectedList(resourceType, resourceTitle);\n  }\n  updateData();\n}\n\nexport function handleClearAll(): void {\n  document.querySelectorAll('.selected-product').forEach((productElement) => {\n    productElement.remove();\n  });\n  removeAllResourcesFromCookie();\n  updateData();\n}\n\nfunction createResourceRow(product: Product): string {\n  const { type, title, quantity, quantityA3, quantityA2 } = product;\n  return `\n      <div class=\"order-summary_cell main\">${title}</div>\n      <div class=\"order-summary_cell\">${type}</div>\n      <div class=\"order-summary_cell\">${type === 'Infographie' ? `A3: ${quantityA3} <br> A2: ${quantityA2}` : `${quantity}`}</div>\n      <div class=\"order-summary_cell price\">${getResourcePricing(product)}.-</div>\n  `;\n}\n\nfunction getEmailContent(products: Product[]): string {\n  let emailContent = `\n    <table style=\"border-collapse: collapse; color: black;\">\n      <tr>\n        <th style=\"padding: 8px; border: 1px solid black;text-align: left;\">Type</th>\n        <th style=\"padding: 8px; border: 1px solid black;text-align: left;\">Titre de la resource</th>\n        <th style=\"padding: 8px; border: 1px solid black;text-align: left;\">Quantit\u00E9</th>\n        <th style=\"padding: 8px; border: 1px solid black;text-align: left;\">Prix</th>\n      </tr>\n  `;\n\n  products.map((product: Product) => {\n    const { type, title, quantity, quantityA3, quantityA2 } = product;\n    emailContent += `\n      <tr>\n        <td style=\"padding: 8px; border: 1px solid black;\">${type}</td>\n        <td style=\"padding: 8px; border: 1px solid black;\">${title}</td>\n        <td style=\"padding: 8px; border: 1px solid black;\">${type === 'Infographie' ? `A3: ${quantityA3} <br> A2: ${quantityA2}` : `${quantity}`}</td>\n        <td style=\"padding: 8px; border: 1px solid black;\">${getResourcePricing(product)}.-</td>\n      </tr>\n    `;\n  });\n  emailContent += `\n    <tr>\n      <td style=\"padding: 8px; border: 1px solid black; text-align: right; font-weight: bold;\">${parseInt(getPricing()) + 9} (frais de port inclus)</td>\n    </tr>`;\n\n  emailContent += `</table>`;\n\n  return emailContent;\n}\n\nexport function handleNextStep(): void {\n  const step1Div = document.querySelector('[data-nmra-element=\"step1\"]') as HTMLElement;\n  const step2Div = document.querySelector('[data-nmra-element=\"step2\"]') as HTMLElement;\n  const textarea = document.querySelector('[data-nmra-element=\"text-area\"]') as HTMLTextAreaElement;\n  const totalPricing = document.querySelector('[data-nmra-element=\"total-price\"]') as HTMLElement;\n  const summaryContent = document.querySelector(\n    '[data-nmra-element=\"summary-content\"]'\n  ) as HTMLElement;\n\n  if (getResourceCount() > 0 && checkQuantities()) {\n    if (totalPricing) {\n      totalPricing.textContent = `${parseInt(getPricing()) + 9}.- CHF`;\n    }\n\n    if (step1Div && step2Div) {\n      step1Div.style.display = 'none';\n      step2Div.style.display = 'block';\n\n      const products = getCookie('selectedProducts') || [];\n\n      products.map((product: Product) => {\n        const productElement = document.createElement('div');\n        productElement.classList.add('order-summary_row');\n        productElement.innerHTML = createResourceRow(product);\n        summaryContent.appendChild(productElement);\n      });\n\n      if (textarea) {\n        textarea.value = getEmailContent(products);\n        textarea.disabled = true;\n      }\n    }\n  }\n}\n\nexport function handlePreviousStep(): void {\n  const step1Div = document.querySelector('[data-nmra-element=\"step1\"]') as HTMLElement;\n  const step2Div = document.querySelector('[data-nmra-element=\"step2\"]') as HTMLElement;\n\n  if (step1Div && step2Div) {\n    step1Div.style.display = 'block';\n    step2Div.style.display = 'none';\n  }\n}\n\nfunction createToast(message: string, addButton: boolean): void {\n  const toast = document.createElement('div');\n  toast.classList.add('toast-success');\n  toast.textContent = message;\n  if (addButton) {\n    const button = document.createElement('button');\n    button.classList.add('button', 'is-secondary', 'is-small', 'is-alternate');\n    button.textContent = 'Aller au panier';\n    button.addEventListener('click', () => {\n      window.location.href = '/commander-wip';\n    });\n    toast.appendChild(button);\n  }\n  document.body.appendChild(toast);\n\n  setTimeout(() => {\n    toast.remove();\n  }, 3000);\n\n  toast.addEventListener('click', () => {\n    toast.remove();\n  });\n}\n\nexport function handleAddRessourceToCart(): void {\n  const titleElement = document.querySelector('[data-nmra-element=\"title\"]') as HTMLElement;\n  const resourceTitle = titleElement?.innerText as string;\n  const resourceType = titleElement.getAttribute('data-nmra-type') as string;\n  if (!resourceAlreadySelected(resourceType, resourceTitle)) {\n    const product: Product = {\n      type: resourceType,\n      title: resourceTitle,\n      quantity: resourceType === 'Infographie' ? 1 : 0,\n      quantityA2: 0,\n      quantityA3: 0,\n    };\n    updateCart(product);\n    createToast('Ressource ajout\u00E9e au panier', true);\n  } else {\n    createToast('La ressource est d\u00E9j\u00E0 dans le panier', true);\n  }\n}\n", "import { handleAddRessourceToCart } from '$utils/handlersFunctions';\nimport { updateCartMenu } from '$utils/updateFunctions';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  document.querySelectorAll('[data-nmra-action=\"add-to-cart\"]').forEach((element) => {\n    element.addEventListener('click', handleAddRessourceToCart);\n  });\n\n  updateCartMenu();\n});\n"],
  "mappings": "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",
  "names": []
}
